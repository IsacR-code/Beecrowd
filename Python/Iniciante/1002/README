# Beecrowd | 1002 | √Årea do C√≠rculo

[Link para o Problema](https://www.beecrowd.com.br/judge/pt/problems/view/1002 )

## üéØ Resumo do Problema

O desafio √© calcular a √°rea de um c√≠rculo a partir de um valor de raio fornecido. O valor de œÄ (pi) a ser utilizado √© 3.14159. O resultado deve ser impresso com 4 casas decimais, no formato "A=[area]".

---

## üß† L√≥gica da Solu√ß√£o

A solu√ß√£o foi implementada em Python e segue uma abordagem direta, dividida em quatro passos claros, exatamente como no c√≥digo fornecido.

1.  **Defini√ß√£o de œÄ (pi):** Primeiro, o valor de œÄ √© definido e armazenado em uma vari√°vel chamada `n`.
    ```python
    n = 3.14159
    ```

2.  **Leitura do Raio:** A fun√ß√£o `input()` √© usada para ler o valor do raio. Como o raio pode ser um n√∫mero com casas decimais, o valor lido (que √© uma string) √© imediatamente convertido para o tipo `float`.
    ```python
    raio = float(input())
    ```

3.  **C√°lculo da √Årea:** A √°rea do c√≠rculo √© calculada utilizando a f√≥rmula matem√°tica *√°rea = œÄ * raio¬≤*. No c√≥digo, o operador `**` √© usado para realizar a exponencia√ß√£o (elevar o raio ao quadrado).
    ```python
    area = n * (raio ** 2)
    ```

4.  **Impress√£o Formatada:** Para exibir o resultado final, uma *f-string* √© utilizada. Ela permite formatar a sa√≠da de forma precisa. A express√£o `{area:.4f}` dentro da string garante que o valor da vari√°vel `area` seja formatado para ter exatamente quatro casas decimais, cumprindo o requisito do problema.
    ```python
    print(f"A={area:.4f}")
    ```

---

## An√°lise de Complexidade

*   **Complexidade de Tempo:** `O(1)` - Todas as opera√ß√µes (atribui√ß√£o, leitura, convers√£o de tipo, c√°lculo matem√°tico e impress√£o) s√£o executadas em tempo constante.
*   **Complexidade de Espa√ßo:** `O(1)` - A mem√≥ria necess√°ria para as vari√°veis `n`, `raio` e `area` √© fixa e n√£o depende do valor da entrada.

---

## ‚úÖ Status

- [x] Solu√ß√£o enviada e aceita.