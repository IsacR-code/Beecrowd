# Beecrowd | 1004 | Produto Simples

[Link para o Problema](https://www.beecrowd.com.br/judge/pt/problems/view/1004 )

## üéØ Resumo do Problema

A tarefa consiste em ler dois valores inteiros, calcular o produto entre eles e apresentar o resultado. A sa√≠da deve seguir o formato "PROD = [resultado]", onde `[resultado]` √© o produto dos dois n√∫meros.

---

## üß† L√≥gica da Solu√ß√£o

A solu√ß√£o em Python √© concisa e eficiente, focando em tr√™s opera√ß√µes fundamentais: leitura, c√°lculo e impress√£o.

1.  **Leitura da Entrada:** Os dois valores inteiros s√£o lidos da entrada padr√£o, um por linha. A fun√ß√£o `input()` captura os valores como texto, e a fun√ß√£o `int()` os converte para o tipo num√©rico inteiro, armazenando-os nas vari√°veis `A` e `B`.
    ```python
    A = int(input())
    B = int(input())
    ```

2.  **C√°lculo do Produto:** O produto entre `A` e `B` √© calculado utilizando o operador de multiplica√ß√£o (`*`). O resultado desta opera√ß√£o √© armazenado na vari√°vel `prod`.
    ```python
    prod = A * B
    ```

3.  **Impress√£o Formatada:** Para garantir que a sa√≠da corresponda exatamente ao formato exigido pelo problema, uma *f-string* √© utilizada. Ela integra o texto "PROD = " com o valor da vari√°vel `prod`, gerando a string final a ser impressa no console.
    ```python
    print(f"PROD = {prod}")
    ```

---

## An√°lise de Complexidade

*   **Complexidade de Tempo:** `O(1)` - A solu√ß√£o executa um n√∫mero fixo de opera√ß√µes (leitura, multiplica√ß√£o, impress√£o) que n√£o dependem do valor dos n√∫meros de entrada, caracterizando uma complexidade de tempo constante.
*   **Complexidade de Espa√ßo:** `O(1)` - A mem√≥ria utilizada para as vari√°veis `A`, `B` e `prod` √© constante, n√£o escalando com a entrada.

---

## ‚úÖ Status

- [x] Solu√ß√£o enviada e aceita.